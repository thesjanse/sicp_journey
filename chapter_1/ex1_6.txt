Exercise 1.5.
Ben Bitdiddle has invented a test to determine whether the interpreter
he is faced with is using applicative-order evaluation or
normal-order evaluation. He defines the following two procedures:

(define (p) (p))

(define (test x y)
  (if (= x 0)
      0
      y))

Then he evaluates the expression

(test 0 (p))

What behavior will Ben observe with an interpreter that uses
applicative-order evaluation? What behavior will he observe with an
interpreter that uses normal-order evaluation?
Explain your answer.

Answer:
; applicative-order evaluation
(test 0 (p))
(test 0 (p))
(test 0 (p))
there would be an infinite loop because (p) expands to itself.
the conditional statement will not be invoked.

; normal-order evaluation
(test 0 (p))
(if (= 0 0)
    0
    (p))
(if #t 0 (p))
(0)
We expand the left-most outer-most redex without evaluation of arguments.
The conditional statement is invoked before (p) evaluation.
The result is 0.